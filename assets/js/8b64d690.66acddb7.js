"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[434],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>m});var o=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},c=Object.keys(e);for(o=0;o<c.length;o++)t=c[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)t=c[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),s=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(l.Provider,{value:n},e.children)},y="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,c=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),y=s(t),u=r,m=y["".concat(l,".").concat(u)]||y[u]||d[u]||c;return t?o.createElement(m,i(i({ref:n},p),{},{components:t})):o.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=t.length,i=new Array(c);i[0]=u;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[y]="string"==typeof e?e:r,i[1]=a;for(var s=2;s<c;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7835:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>y});var o=t(8168),r=t(8587),c=(t(6540),t(5680)),i=["components"],a={id:"connection-lifecycle",title:"Connection Lifecycle",sidebar_label:"Connection Lifecycle"},l=void 0,s={unversionedId:"connection-lifecycle",id:"connection-lifecycle",title:"Connection Lifecycle",description:"Once the connection to the broker has been established, the IConnection interface can notify you about several important events that may occur throughout the connection lifecycle.",source:"@site/../docs/connection-lifecycle.md",sourceDirName:".",slug:"/connection-lifecycle",permalink:"/dotnet-activemq-artemis-client/docs/connection-lifecycle",draft:!1,editUrl:"https://github.com/Havret/dotnet-activemq-artemis-client/edit/master/website/../docs/connection-lifecycle.md",tags:[],version:"current",frontMatter:{id:"connection-lifecycle",title:"Connection Lifecycle",sidebar_label:"Connection Lifecycle"},sidebar:"someSidebar",previous:{title:"Consumer Credit",permalink:"/dotnet-activemq-artemis-client/docs/consumer-credit"},next:{title:"Automatic Recovery",permalink:"/dotnet-activemq-artemis-client/docs/auto-recovery"}},p={},y=[{value:"Connection Closed",id:"connection-closed",level:2}],d={toc:y},u="wrapper";function m(e){var n=e.components,t=(0,r.A)(e,i);return(0,c.yg)(u,(0,o.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,c.yg)("p",null,"Once the connection to the broker has been established, the ",(0,c.yg)("inlineCode",{parentName:"p"},"IConnection")," interface can notify you about several important events that may occur throughout the connection lifecycle."),(0,c.yg)("h2",{id:"connection-closed"},"Connection Closed"),(0,c.yg)("p",null,(0,c.yg)("inlineCode",{parentName:"p"},"IConnection.ConnectionClosed")," will be raised when the connection to the broker has been lost."),(0,c.yg)("pre",null,(0,c.yg)("code",{parentName:"pre",className:"language-csharp"},"var connectionFactory = new ConnectionFactory();\nvar connection = await connectionFactory.CreateAsync(endpoint);\nconnection.ConnectionClosed += (sender, eventArgs) =>\n{\n    // react accordingly\n};\n")),(0,c.yg)("p",null,"When the connection was created with ",(0,c.yg)("a",{parentName:"p",href:"/dotnet-activemq-artemis-client/docs/auto-recovery"},"enabled automatic recovery"),", this event may be raised multiple times. Without ",(0,c.yg)("a",{parentName:"p",href:"/dotnet-activemq-artemis-client/docs/auto-recovery"},"automatic recovery")," this notification signifies that you won't be able to use this connection anymore."),(0,c.yg)("p",null,(0,c.yg)("inlineCode",{parentName:"p"},"ConnectionClosed")," event is raised with ",(0,c.yg)("inlineCode",{parentName:"p"},"ConnectionClosedEventArgs")," parameter. You can inspect it to check the error that caused the connection to be terminated:"),(0,c.yg)("pre",null,(0,c.yg)("code",{parentName:"pre",className:"language-csharp"},"connection.ConnectionClosed += (sender, eventArgs) =>\n{\n    // reason the connection was closed  \n    string reason = eventArgs.Error;\n    _logger.LogWarning(reason);\n};\n")),(0,c.yg)("p",null,"Or you can verify whether the connection was closed by the remote peer (broker) or not:"),(0,c.yg)("pre",null,(0,c.yg)("code",{parentName:"pre",className:"language-csharp"},'connection.ConnectionClosed += (sender, eventArgs) =>\n{\n    bool closedByPeer = eventArgs.ClosedByPeer;\n    if (closedByPeer) \n    {\n        _logger.LogWarning("connection was closed by the broker");\n    }\n    else\n    {\n        _logger.LogWarning("connection was closed by the client");\n    }\n};\n')),(0,c.yg)("p",null,"You can also check if the connection is open by inspecting ",(0,c.yg)("inlineCode",{parentName:"p"},"IsOpened")," property:"),(0,c.yg)("pre",null,(0,c.yg)("code",{parentName:"pre",className:"language-csharp"},"var connectionFactory = new ConnectionFactory();\nvar connection = await connectionFactory.CreateAsync(endpoint);\nif (connection.IsOpened)\n{\n    // connection is still opened\n}\nelse\n{\n    // connection to the broker has been lost\n}\n\n## Maintaining Connection Stability with TCP Keep-Alive\n\nTo enhance connection stability and prevent unexpected disconnections, consider configuring TCP Keep-Alive settings. This feature sends periodic signals to ensure the connection remains active, especially useful in unstable network environments.\n\n```csharp\nvar factory = new ConnectionFactory();\n// Configure TCP Keep-Alive settings\nfactory.TCP.KeepAliveTime = 30_000; // 30 seconds\nfactory.TCP.KeepAliveInterval = 1000; // 1 second\n")),(0,c.yg)("p",null,"By setting ",(0,c.yg)("inlineCode",{parentName:"p"},"KeepAliveTime")," and ",(0,c.yg)("inlineCode",{parentName:"p"},"KeepAliveInterval"),", you can help ensure that your application maintains a reliable connection to the broker, complementing the event-driven connection management strategies outlined above."))}m.isMDXComponent=!0}}]);