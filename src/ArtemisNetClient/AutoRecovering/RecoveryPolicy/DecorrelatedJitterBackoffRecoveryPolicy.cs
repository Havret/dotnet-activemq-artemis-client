using System;

namespace ActiveMQ.Artemis.Client.AutoRecovering.RecoveryPolicy
{
    /// <summary>
    /// Generates sleep durations in an exponentially backing-off, jittered manner, making sure to mitigate any correlations.
    /// Implementation inspired by https://github.com/Polly-Contrib/Polly.Contrib.WaitAndRetry/blob/master/src/Polly.Contrib.WaitAndRetry/Backoff.DecorrelatedJitterV2.cs
    /// The original author/credit for this jitter formula is George Polevoy (@george-polevoy). Used here with his permission.
    /// </summary>
    internal class DecorrelatedJitterBackoffRecoveryPolicy : IRecoveryPolicy
    {
        private readonly long _targetTicksFirstDelay;
        private readonly double _maxDelayTicks;
        private readonly bool _fastFirst;
        private readonly Random _random;
        private double _prev;

        public DecorrelatedJitterBackoffRecoveryPolicy(TimeSpan medianFirstRetryDelay, TimeSpan maxDelay, int retryCount, int? seed, bool fastFirst)
        {
            if (medianFirstRetryDelay < TimeSpan.Zero) throw new ArgumentOutOfRangeException(nameof(medianFirstRetryDelay), medianFirstRetryDelay, "should be >= 0ms");
            if (maxDelay < medianFirstRetryDelay) throw new ArgumentOutOfRangeException(nameof(maxDelay), maxDelay, "should be >= medianFirstRetryDelay");
            if (retryCount < 0) throw new ArgumentOutOfRangeException(nameof(retryCount), retryCount, "should be >= 0");

            _targetTicksFirstDelay = medianFirstRetryDelay.Ticks;
            RetryCount = retryCount;
            _fastFirst = fastFirst;
            
            // Upper-bound to prevent overflow beyond TimeSpan.MaxValue
            _maxDelayTicks = maxDelay.Ticks > TimeSpan.MaxValue.Ticks - 1000 
                ? (double) maxDelay.Ticks - 1000 
                : maxDelay.Ticks;
            _random = seed == null ? new Random() : new Random(seed.Value);
        }
        
        public int RetryCount { get; }
        
        public TimeSpan GetDelay(int attempt)
        {
            if (_fastFirst)
            {
                if (attempt == 1)
                {
                    return TimeSpan.Zero;    
                }

                attempt--;
            }

            if (attempt == 1)
            {
                _prev = 0.0;
            }

            // A factor used within the formula to help smooth the first calculated delay.
            const double pFactor = 4.0;
            
            // A factor used to scale the median values of the retry times generated by the formula to be _near_ whole seconds.
            // This factor allows the median values to fall approximately at 1, 2, 4 etc seconds, instead of 1.4, 2.8, 5.6, 11.2.
            const double rpScalingFactor = 1 / 1.4d;

            var t = attempt + _random.NextDouble();
            var next = Math.Pow(2, t) * Math.Tanh(Math.Sqrt(pFactor * t));
            
            double formulaIntrinsicValue = next - _prev;
            _prev = next;

            var delay = formulaIntrinsicValue * rpScalingFactor * _targetTicksFirstDelay;
            return TimeSpan.FromTicks((long) Math.Min(delay, _maxDelayTicks));
        }
    }
}