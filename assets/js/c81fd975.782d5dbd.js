"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[218],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var i=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),g=a,m=d["".concat(l,".").concat(g)]||d[g]||u[g]||r;return n?i.createElement(m,s(s({ref:t},p),{},{components:n})):i.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<r;c++)s[c]=n[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9812:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var i=n(8168),a=n(8587),r=(n(6540),n(5680)),s=["components"],o={id:"testing",title:"Testing",sidebar_label:"Testing"},l=void 0,c={unversionedId:"testing",id:"testing",title:"Testing",description:"Automated testing is a crucial and intrinsic part of the software development cycle. .NET Client for ActiveMQ Artemis comes with a dedicated package ArtemisNetClient.Testing that will help you to test the messaging-dependent part of your application with ease in a controlled but realistic environment.",source:"@site/../docs/testing.md",sourceDirName:".",slug:"/testing",permalink:"/dotnet-activemq-artemis-client/docs/testing",draft:!1,editUrl:"https://github.com/Havret/dotnet-activemq-artemis-client/edit/master/website/../docs/testing.md",tags:[],version:"current",frontMatter:{id:"testing",title:"Testing",sidebar_label:"Testing"},sidebar:"someSidebar",previous:{title:"Request Reply",permalink:"/dotnet-activemq-artemis-client/docs/request-reply"},next:{title:"Online resources",permalink:"/dotnet-activemq-artemis-client/docs/online-resources"}},p={},d=[{value:"Installation",id:"installation",level:2},{value:"TestKit",id:"testkit",level:2},{value:"Testing ASP.NET Core application",id:"testing-aspnet-core-application",level:2}],u={toc:d},g="wrapper";function m(e){var t=e.components,n=(0,a.A)(e,s);return(0,r.yg)(g,(0,i.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Automated testing is a crucial and intrinsic part of the software development cycle. .NET Client for ActiveMQ Artemis comes with a dedicated package ",(0,r.yg)("inlineCode",{parentName:"p"},"ArtemisNetClient.Testing")," that will help you to test the messaging-dependent part of your application with ease in a controlled but realistic environment. "),(0,r.yg)("h2",{id:"installation"},"Installation"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"ArtemisNetClient.Testing")," is distributed via ",(0,r.yg)("a",{parentName:"p",href:"https://www.nuget.org/packages/ArtemisNetClient.Testing"},"NuGet"),". You can add ArtemisNetClient.Testing NuGet package using dotnet CLI:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"dotnet add package ArtemisNetClient.Testing\n")),(0,r.yg)("h2",{id:"testkit"},"TestKit"),(0,r.yg)("p",null,"The central part of ",(0,r.yg)("inlineCode",{parentName:"p"},"ArtemisNetClient.Testing")," is TestKit class. TestKit spins up an in-memory message broker that your system under test can connect to using AMQP protocol. It offers a simple API that allows you to send and receive messages to and from the application."),(0,r.yg)("h2",{id:"testing-aspnet-core-application"},"Testing ASP.NET Core application"),(0,r.yg)("p",null,"Let's consider a very simple ASP.NET Core application that uses ",(0,r.yg)("inlineCode",{parentName:"p"},"ArtemisNetClient.Extensions.DependencyInjection")," helper package to setup ArtemisNetClient and connect to the broker:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'var builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddActiveMqHostedService();\n\nvar endpoint = Endpoint.Create(\n    host: "localhost",\n    port: 5672,\n    "artemis",\n    "artemis"\n);\nvar activeMqBuilder = builder.Services.AddActiveMq(name: "my-artemis", endpoints: new[] {endpoint});\nactiveMqBuilder.AddConsumer(address: "foo", routingType: RoutingType.Anycast,\n    handler: async (message, consumer, serviceProvider, cancellationToken) =>\n    {\n        var body = message.GetBody<string>();\n\n        var bar = body + "-" + "bar";\n\n        var producer = serviceProvider.GetRequiredService<MyProducer>();\n        await producer.Publish(bar, cancellationToken);\n\n        await consumer.AcceptAsync(message);\n    });\nactiveMqBuilder.AddProducer<MyProducer>("bar", RoutingType.Multicast);\n\n\nvar app = builder.Build();\n\napp.Run();\n\n// this is required so we can use WebApplicationFactory to run the test server\npublic partial class Program { }\n')),(0,r.yg)("p",null,"This application has a single consumer attached to ",(0,r.yg)("inlineCode",{parentName:"p"},"foo")," address using anycast routing type. On each message the app performs some logic and as a final step publishes a new message to a ",(0,r.yg)("inlineCode",{parentName:"p"},"bar")," address."),(0,r.yg)("p",null,"With ",(0,r.yg)("inlineCode",{parentName:"p"},"ArtemisNetClient.Testing")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"Microsoft.AspNetCore.Mvc.Testing")," we can write the following integration test that will verify that our application works as expected:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'public class MyTests\n{\n    [Fact]\n    public async Task Test()\n    {\n        // setup the test kit\n        var endpoint = Endpoint.Create(\n            host: "localhost",\n            port: 5672,\n            "artemis",\n            "artemis"\n        );\n        using var testKit = new TestKit(endpoint);\n        \n        // setup the application\n        await using var application = new WebApplicationFactory<Program>();\n\n        // trigger the app to start\n        application.CreateClient();\n\n        // subscribe to the bar address\n        using var subscription = testKit.Subscribe("bar");\n        \n        // send a message to the application\n        await testKit.SendMessageAsync("foo", new Message("my-payload"));\n\n        // wait for a message sent from the application\n        var message = await subscription.ReceiveAsync();\n        \n        Assert.Equal("my-payload-bar", message.GetBody<string>());\n    }\n}\n')))}m.isMDXComponent=!0}}]);