"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[310],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),l=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return i.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return n?i.createElement(g,s(s({ref:t},p),{},{components:n})):i.createElement(g,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<a;l++)s[l]=n[l];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3786:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),s=["components"],o={id:"testing",title:"Testing",sidebar_label:"Testing"},c={unversionedId:"testing",id:"testing",isDocsHomePage:!1,title:"Testing",description:"Automated testing is a crucial and intrinsic part of the software development cycle. .NET Client for ActiveMQ Artemis comes with a dedicated package ArtemisNetClient.Testing that will help you to test the messaging-dependent part of your application with ease in a controlled but realistic environment.",source:"@site/../docs/testing.md",sourceDirName:".",slug:"/testing",permalink:"/dotnet-activemq-artemis-client/docs/testing",editUrl:"https://github.com/Havret/dotnet-activemq-artemis-client/edit/master/website/../docs/testing.md",version:"current",sidebar_label:"Testing",frontMatter:{id:"testing",title:"Testing",sidebar_label:"Testing"},sidebar:"someSidebar",previous:{title:"Automatic Recovery From Network Failures",permalink:"/dotnet-activemq-artemis-client/docs/auto-recovery"},next:{title:"Online resources",permalink:"/dotnet-activemq-artemis-client/docs/online-resources"}},l=[{value:"Installation",id:"installation",children:[]},{value:"TestKit",id:"testkit",children:[]},{value:"Testing ASP.NET Core application",id:"testing-aspnet-core-application",children:[]}],p={toc:l};function u(e){var t=e.components,n=(0,r.Z)(e,s);return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Automated testing is a crucial and intrinsic part of the software development cycle. .NET Client for ActiveMQ Artemis comes with a dedicated package ",(0,a.kt)("inlineCode",{parentName:"p"},"ArtemisNetClient.Testing")," that will help you to test the messaging-dependent part of your application with ease in a controlled but realistic environment. "),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ArtemisNetClient.Testing")," is distributed via ",(0,a.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/ArtemisNetClient.Testing"},"NuGet"),". You can add ArtemisNetClient.Testing NuGet package using dotnet CLI:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"dotnet add package ArtemisNetClient.Testing\n")),(0,a.kt)("h2",{id:"testkit"},"TestKit"),(0,a.kt)("p",null,"The central part of ",(0,a.kt)("inlineCode",{parentName:"p"},"ArtemisNetClient.Testing")," is TestKit class. TestKit spins up an in-memory message broker that your system under test can connect to using AMQP protocol. It offers a simple API that allows you to send and receive messages to and from the application."),(0,a.kt)("h2",{id:"testing-aspnet-core-application"},"Testing ASP.NET Core application"),(0,a.kt)("p",null,"Let's consider a very simple ASP.NET Core application that uses ",(0,a.kt)("inlineCode",{parentName:"p"},"ArtemisNetClient.Extensions.DependencyInjection")," helper package to setup ArtemisNetClient and connect to the broker:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'var builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddActiveMqHostedService();\n\nvar endpoint = Endpoint.Create(\n    host: "localhost",\n    port: 5672,\n    "artemis",\n    "artemis"\n);\nvar activeMqBuilder = builder.Services.AddActiveMq(name: "my-artemis", endpoints: new[] {endpoint});\nactiveMqBuilder.AddConsumer(address: "foo", routingType: RoutingType.Anycast,\n    handler: async (message, consumer, serviceProvider, cancellationToken) =>\n    {\n        var body = message.GetBody<string>();\n\n        var bar = body + "-" + "bar";\n\n        var producer = serviceProvider.GetRequiredService<MyProducer>();\n        await producer.Publish(bar, cancellationToken);\n\n        await consumer.AcceptAsync(message);\n    });\nactiveMqBuilder.AddProducer<MyProducer>("bar", RoutingType.Multicast);\n\n\nvar app = builder.Build();\n\napp.Run();\n\n// this is required so we can use WebApplicationFactory to run the test server\npublic partial class Program { }\n')),(0,a.kt)("p",null,"This application has a single consumer attached to ",(0,a.kt)("inlineCode",{parentName:"p"},"foo")," address using anycast routing type. On each message the app performs some logic and as a final step publishes a new message to a ",(0,a.kt)("inlineCode",{parentName:"p"},"bar")," address."),(0,a.kt)("p",null,"With ",(0,a.kt)("inlineCode",{parentName:"p"},"ArtemisNetClient.Testing")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Microsoft.AspNetCore.Mvc.Testing")," we can write the following integration test that will verify that our application works as expected:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'public class MyTests\n{\n    [Fact]\n    public async Task Test()\n    {\n        // setup the test kit\n        var endpoint = Endpoint.Create(\n            host: "localhost",\n            port: 5672,\n            "artemis",\n            "artemis"\n        );\n        using var testKit = new TestKit(endpoint);\n        \n        // setup the application\n        await using var application = new WebApplicationFactory<Program>();\n\n        // trigger the app to start\n        application.CreateClient();\n\n        // subscribe to the bar address\n        using var subscription = testKit.Subscribe("bar");\n        \n        // send a message to the application\n        await testKit.SendMessageAsync("foo", new Message("my-payload"));\n\n        // wait for a message sent from the application\n        var message = await subscription.ReceiveAsync();\n        \n        Assert.Equal("my-payload-bar", message.GetBody<string>());\n    }\n}\n')))}u.isMDXComponent=!0}}]);