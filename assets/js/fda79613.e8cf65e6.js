"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[260],{5680:(e,t,a)=>{a.d(t,{xA:()=>y,yg:()=>d});var n=a(6540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},y=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),m=p(a),g=r,d=m["".concat(s,".").concat(g)]||m[g]||c[g]||i;return a?n.createElement(d,l(l({ref:t},y),{},{components:a})):n.createElement(d,l({ref:t},y))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},9728:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>y,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var n=a(8168),r=a(8587),i=(a(6540),a(5680)),l=["components"],o={id:"message-payload",title:"Message Payload",sidebar_label:"Message Payload"},s=void 0,p={unversionedId:"message-payload",id:"message-payload",title:"Message Payload",description:"The client uses Message class to represent messages which may be transmitted. A Message can carry various types of payload and accompanying metadata.",source:"@site/../docs/message-payload.md",sourceDirName:".",slug:"/message-payload",permalink:"/dotnet-activemq-artemis-client/docs/message-payload",draft:!1,editUrl:"https://github.com/Havret/dotnet-activemq-artemis-client/edit/master/website/../docs/message-payload.md",tags:[],version:"current",frontMatter:{id:"message-payload",title:"Message Payload",sidebar_label:"Message Payload"},sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/dotnet-activemq-artemis-client/docs/getting-started"},next:{title:"Message Durability",permalink:"/dotnet-activemq-artemis-client/docs/message-durability"}},y={},m=[],c={toc:m},g="wrapper";function d(e){var t=e.components,a=(0,r.A)(e,l);return(0,i.yg)(g,(0,n.A)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"The client uses ",(0,i.yg)("inlineCode",{parentName:"p"},"Message")," class to represent messages which may be transmitted. A ",(0,i.yg)("inlineCode",{parentName:"p"},"Message")," can carry various types of payload and accompanying metadata."),(0,i.yg)("p",null,"A new message can be created as follows:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'var message = new Message("foo");\n')),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"Message")," constructor accepts a single parameter of type object. It's the message body. Although body argument is very generic, only certain types are considered as a valid payload:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"string")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"char")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"byte")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"sbyte")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"short")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"ushort")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"int")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"uint")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"long")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"ulong")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"float")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"System.Guid")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"System.DateTime")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"byte[]")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Amqp.Types.List"))),(0,i.yg)("p",null,"An attempt to pass an argument out of this list will result in ",(0,i.yg)("inlineCode",{parentName:"p"},"ArgumentOutOfRangeException"),". Passing ",(0,i.yg)("inlineCode",{parentName:"p"},"null")," is not acceptable either and will cause ",(0,i.yg)("inlineCode",{parentName:"p"},"ArgumentNullException"),"."),(0,i.yg)("p",null,"In order to get the message payload call ",(0,i.yg)("inlineCode",{parentName:"p"},"GetBody")," and specify the expected type of the body section:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"var body = message.GetBody<T>();\n")),(0,i.yg)("p",null,"If ",(0,i.yg)("inlineCode",{parentName:"p"},"T")," matches the type of the payload, the value will be returned, otherwise, you will get ",(0,i.yg)("inlineCode",{parentName:"p"},"default(T)"),"."))}d.isMDXComponent=!0}}]);